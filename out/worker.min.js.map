{"version":3,"file":"worker.min.js","sources":["../src/APICacheWorker.ts"],"sourcesContent":["let loaded = false;\nlet database = undefined;\nconst endpoints = ['items', 'itemstats', 'skills', 'traits', 'specializations', 'pvp/amulets', 'pets', 'palettes'];\nself.addEventListener('install', (e) => e.waitUntil(tryOpenDb()));\nself.addEventListener('activate', (e) => {\n    var _a;\n    return e.waitUntil(Promise.all([\n        (_a = self.registration) === null || _a === void 0 ? void 0 : _a.navigationPreload.enable(),\n        self.clients.claim(),\n    ]));\n});\nfunction tryOpenDb() {\n    return new Promise((accept, reject) => {\n        const request = self.indexedDB.open(\"gw2api\");\n        request.onerror = (e) => {\n            loaded = true;\n            console.error(e);\n            reject(e);\n        };\n        request.onsuccess = (e) => {\n            database = e.target.result;\n            loaded = true;\n            accept();\n        };\n        request.onupgradeneeded = (e) => {\n            const db = e.target.result;\n            for (const ep of endpoints) {\n                db.createObjectStore(ep);\n            }\n            console.log('stores created', db);\n        };\n    });\n}\nasync function makeResponse(request, preload) {\n    var _a;\n    if (!loaded) {\n        await tryOpenDb();\n    }\n    const url = new URL(request.url);\n    let ids = (_a = url.searchParams.get('ids')) === null || _a === void 0 ? void 0 : _a.split(',').map(s => parseInt(s)).filter(id => !isNaN(id));\n    let endpoint;\n    if (ids) {\n        endpoint = url.pathname.slice(1);\n    }\n    else {\n        const path = url.pathname;\n        const lastSlash = path.lastIndexOf('/');\n        endpoint = path.slice(1, lastSlash);\n        const id = parseInt(path.slice(lastSlash + 1));\n        ids = isNaN(id) ? [] : [id];\n    }\n    const cache = database === null || database === void 0 ? void 0 : database.transaction(endpoint, 'readwrite').objectStore(endpoint);\n    if (cache) {\n        const min = Math.min.apply(null, ids);\n        const max = Math.max.apply(null, ids);\n        const remainingIds = new Set(ids);\n        const result = [];\n        await new Promise((accept, reject) => {\n            const req = cache.openCursor(IDBKeyRange.bound(min, max));\n            req.onsuccess = (e) => {\n                const cursor = e.target.result;\n                if (cursor) {\n                    if (remainingIds.delete(cursor.key)) {\n                        result.push(cursor.value);\n                    }\n                    cursor.continue();\n                }\n                else {\n                    accept();\n                }\n            };\n            req.onerror = (e) => reject(e);\n        });\n        if (remainingIds.size > 0) {\n            const response = await fetch(url.origin + '/' + endpoint + '?ids=' + Array.from(remainingIds).join(','));\n            const json = await response.json();\n            const cache = database.transaction(endpoint, 'readwrite').objectStore(endpoint);\n            for (const obj of json) {\n                const strRepr = JSON.stringify(obj);\n                result.push(strRepr);\n                cache.put(strRepr, obj.id);\n            }\n            cache.transaction.commit();\n        }\n        return new Response('[' + result.join(',') + ']', { \"status\": 200, headers: { \"Content-Type\": \"application/json\" } });\n    }\n    else {\n        console.log(\"no cache\", endpoint, caches);\n        return await fetch(request);\n    }\n}\nself.addEventListener('fetch', (e) => {\n    if (!e.request.headers.has(\"X-TTJS-Worker-Cached\"))\n        return;\n    e.respondWith(makeResponse(e.request, e.preloadResponse));\n});\nexport {};\n//# sourceMappingURL=APICacheWorker.js.map"],"names":["database","loaded","endpoints","tryOpenDb","Promise","accept","reject","request","self","indexedDB","open","onerror","e","console","error","onsuccess","target","result","onupgradeneeded","db","ep","createObjectStore","log","addEventListener","waitUntil","_a","all","registration","navigationPreload","enable","clients","claim","headers","has","respondWith","async","preload","url","URL","endpoint","ids","searchParams","get","split","map","s","parseInt","filter","id","isNaN","pathname","slice","path","lastSlash","lastIndexOf","cache","transaction","objectStore","min","Math","apply","max","remainingIds","Set","req","openCursor","IDBKeyRange","bound","cursor","delete","key","push","value","continue","size","response","fetch","origin","Array","from","join","json","obj","strRepr","JSON","stringify","put","commit","Response","status","caches","makeResponse","preloadResponse"],"mappings":"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"}